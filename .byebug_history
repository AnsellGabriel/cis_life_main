continue
next
remit_name
continue
remit_name
continue
group_remit.type
group_remit
remit_name
continue
current_user
continue
@current_user
continue
@current_user
continue
@current_user
continue
current_user.userable
current_user
continue
current_user.userable.coop_branch
current_user.coop_branch
current_user
continue
params
continue
params
continue
params
continue
batch.destroy
batch.batch_group_remits.destroy_all
batch.batch_group_remits
      batch.batch_group_remits.destroy_all
      agreement.coop_members.delete(coop_member) if batch.status == 'recent'
      agreement = self.agreement
agreement
      agreement.coop_members.delete(coop_member) if batch.status == 'recent'
      coop_member = batch.coop_member
      agreement.coop_members.delete(coop_member) if batch.status == 'recent'
continue
self.agreement
self
continue
params
continue
params
quit
(Date.today.year - batch.created_at.year) * 12 + (Date.today.month - batch.created_at.month)
batch = Batch.find(64)
batch = Batch.find64()
difference_in_months
quit
(Date.today.year - batch.created_at.year) * 12 + (Date.today.month - batch.created_at.month)
(Date.today.year - batch.created_at.yea) * 12 + (Date.today.month - batch.created_at.month)
Date.today.year - batch.created_at.year
Date.today - batch.created_at
difference_in_months
continue
difference_in_months
continue
agreement.agreements_coop_members.find_by(coop_member_id: coop_member.id)
agreement.agreements_coop_members
agreement.agreements.coop_members
agreement
coop_member
renewal_member
renewal_memebr
continue
params
continue
process_claim_params[:cooperative_id]
process_claim_params[:relationship]
process_claim_params
process_claim[:params]
process_claim[:paras]
continue
@batch.agreement_benefit.name
@batch.agreement_benefits\
@batch.agreement_benefit
@batch
continue
params
@claims
continue
params
@claims
continue
params
@claims
continue
quit
continue
@claims
continue
@claims
continue
@claims
continue
@claims
continue
params
@claims
continue
params
@claims
continue
@claims
claims
continue
@claims
continue
@claims
continue
params
continue
params
@claims
continue
params
@claims
continue
contnue
params
continue
@claims
params
continue
@claims
params
continue
@claims
continue
params
continue
params
@claims
continue
params
@claims
continue
params
@claims
continue
@claims
continue
params
continue
params
continue
@claims
continue
params
batch_beneficiary_params[:claims]
continue
batch_beneficiary_params[:claims]
@claims
batch_beneficiary_params[:claims]
continue
@claims
continue
batch_beneficiary_params[:claims]
batch_beneficiary_params([:claims])
batch_beneficiary_params(:claims)
batch_beneficiary_params
continue
batch_beneficiary_params
batch_beneficiaries_params
params
continue
@claims
continue
@claims.to_b
@claims
continue
contine
batch_beneficiary_params
params
continue
params
continue
batch_beneficiary_params
params
continue
params
continue
agreement_benefit.product_benefits.sum(:premium)
agreement_benefit.product_benefits.where(benefit_type: nil).sum(:premium)
agreement_benefit.product_benefits.where(benefit_type: nil)
agreement_benefit.product_benefits.where.not(benefit_type: 'special')
agreement_benefit.product_benefits.sum(:premium)
agreement_benefit.product_benefits.count
agreement_benefit.product_benefits
agreement_benefit
continue
question_params.keys.map(&:to_i)
valid_health_dec_ids
identical
continue
question_params.keys
continue
question_params.keys
question_params["3"]
question_params["1"]
question_params[1]
question_params
continue
question_data
health_dec
next
subquestions
next
question_data[:answer].blank?
question_data[:answer].balnk?
question_data[:answer].nil?
question_data[:answer]
question_data
health_dec
next
health_dec
continue
self.residency
self.agreement_benefit.product_benefits.where(duration: self.duration)
self.agreement_benefit.product_benefits
self.agreement_benefit
product_benefit
self.premium
next
continue
next
self.premium
continue
self.agreement_benefit.product_benefits.where("residency_floor <= ?", self.residency).where("residency_ceiling >= ?", self.residency).find_by(duration: self.duration)
self.agreement_benefit.product_benefits
                             .where("residency_floor <= ?", self.residency)
                             .where("residency_ceiling >= ?", self.residency)
                             .find_by(duration: self.duration)
product_benefit
self.premium = product_benefit.premium if product_benefit
self.premium
self.prmium
next
self.premium
continue
self.agreement_benefit
calculate_service_fee(group_remit.get_agent_sf, self.premium)
self.residency
calculate_service_fee(group_remit.get_coop_sf, self.premium)
calculate(group_remit.get_coop_sf, self.premium)
self.coop_sf_amount
self.coop_amount
self.premium
self.premium = product_benefit.premium if product_benefit
if product_benefit
product_benefit.premium
