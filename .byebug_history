continue
question_params.keys.map(&:to_i)
valid_health_dec_ids
identical
continue
question_params.keys
continue
question_params.keys
question_params["3"]
question_params["1"]
question_params[1]
question_params
continue
question_data
health_dec
next
subquestions
next
question_data[:answer].blank?
question_data[:answer].balnk?
question_data[:answer].nil?
question_data[:answer]
question_data
health_dec
next
health_dec
continue
self.residency
self.agreement_benefit.product_benefits.where(duration: self.duration)
self.agreement_benefit.product_benefits
self.agreement_benefit
product_benefit
self.premium
next
continue
next
self.premium
continue
self.agreement_benefit.product_benefits.where("residency_floor <= ?", self.residency).where("residency_ceiling >= ?", self.residency).find_by(duration: self.duration)
self.agreement_benefit.product_benefits
                             .where("residency_floor <= ?", self.residency)
                             .where("residency_ceiling >= ?", self.residency)
                             .find_by(duration: self.duration)
product_benefit
self.premium = product_benefit.premium if product_benefit
self.premium
self.prmium
next
self.premium
continue
self.agreement_benefit
calculate_service_fee(group_remit.get_agent_sf, self.premium)
self.residency
calculate_service_fee(group_remit.get_coop_sf, self.premium)
calculate(group_remit.get_coop_sf, self.premium)
self.coop_sf_amount
self.coop_amount
self.premium
self.premium = product_benefit.premium if product_benefit
if product_benefit
product_benefit.premium
product_benefit
self.premium
self.premiu
self
continue
batch.residency
batch.duration
batch.agreement_benefit
batch
continue
batch
coverage < nel
coverage
nel
quit
member
continue
member
quit
continue
member
agreement_benefits
age_min_max
continue
next
question_data
next
question_data
next
question_data
next
question_data
next
question_data
next
question_data
next
question_data
next
question_data
question_data[:answer]
next
question_data[:answer]
question_data
clear
continue
question_data[:]
question_data[:answer]
question_data
continue
question_params.each do |question_id, question_data| 
question_params
question_data
question
continue
question_data[:answer]
question_data
continue
question_data
continue
question_data
question_params
continue
question_params["1"]
question_params[1]
question_params
question
continue
103/12
difference_in_months
incident_date
expiry_date.year
expiry_date
@group_remit
agreement
coop_member
continue
<<<<<<< HEAD
@coop_member.agreements
@coop_member
continue
health_dec.valid_answer.to_s
continue
health_dec.valid_answer.to_s
health_dec.valid_answer
question_data[:answer]
continue
question_data[:answer]
continue
subquestion_data
subquestion_id
subquestion_answer
next
subquestion_answer
next
subquestion_id
subquestion_answer
continue
subquestions
next
subquestions
next
net
question_data
question_data[:subquestion]
question_data[:subquestion][0]
next
subquestion
next
question_data[:subquestion]
question_data[:subquestions]
subquestions
next
question_data[:answer]
answer
question_data
next
question_data
next
question_data
answer
next
question_data\\\
question_data
question_id
subquestions
answer
next
question_data[:subquestions]
question_data
question_id
answer
next
answer
question_params
next
question_params
continue
params[:question]
params[:batch_health_dec]
params
continue
params[:question]
params[:question].keys
params[:question]
params
continue
next
continue
params[:question]
continue
params[:question]["4"]
params[:question]["3"]
params[:question]["2"]
params[:question]["1"]
params[:question]
params[:question][:subquestions]
params[:question][:subquestiond]
params[:question][:subquestion]
params[:subquestion]
params[:subquestions]
params[:question]
params
continue
@questionaire
continue
AgreementBenefits.insured_type
AgreementBenefits.status
params[:question][:8]
params[:question][8]
params[:question]
param[:question]
continue
=======
<<<<<<< HEAD
>>>>>>> 5d3ce79 (merge from underwriting module to main)
=======
>>>>>>> main
coop_members.size
coop_members
q
continue
insured_type
continue
dependent[:relationship]
insured_type
q
continue
q
row
member_hash
quit
continue
batch_hash
continue
