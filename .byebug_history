continue
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
params
continue
params[:process_remark][:process_status]
continue
=======
>>>>>>> main
=======
health_dec.valid_answer.to_s
continue
health_dec.valid_answer.to_s
health_dec.valid_answer
question_data[:answer]
continue
>>>>>>> main
question_data[:answer]
continue
subquestion_data
subquestion_id
subquestion_answer
next
subquestion_answer
next
subquestion_id
subquestion_answer
continue
subquestions
next
subquestions
next
net
question_data
question_data[:subquestion]
question_data[:subquestion][0]
next
subquestion
next
question_data[:subquestion]
question_data[:subquestions]
subquestions
next
question_data[:answer]
answer
question_data
next
question_data
next
question_data
answer
next
question_data\\\
question_data
question_id
subquestions
answer
next
question_data[:subquestions]
question_data
question_id
answer
next
answer
question_params
next
question_params
continue
params[:question]
params[:batch_health_dec]
params
continue
params[:question]
params[:question].keys
params[:question]
params
continue
next
continue
params[:question]
continue
params[:question]["4"]
params[:question]["3"]
params[:question]["2"]
params[:question]["1"]
params[:question]
params[:question][:subquestions]
params[:question][:subquestiond]
params[:question][:subquestion]
params[:subquestion]
params[:subquestions]
params[:question]
params
continue
@questionaire
continue
AgreementBenefits.insured_type
AgreementBenefits.status
params[:question][:8]
params[:question][8]
params[:question]
param[:question]
continue
<<<<<<< HEAD
>>>>>>> 5d3ce79 (merge from underwriting module to main)
=======
>>>>>>> main
coop_members.size
coop_members
q
continue
insured_type
continue
dependent[:relationship]
insured_type
q
continue
q
row
member_hash
quit
continue
batch_hash
continue
row["Rank"]
row = principal_spreadsheet[1]
principal_spreadsheet[1]
principal_spreadsheet[0]
principal_spreadsheet
continue
conntinue
@spreadsheet.sheet(1).headers
@spreadsheet.sheet(1).header
@spreadsheet.sheet(1)
@spreadsheet.sheet_files
@spreadsheet.sheet_names
@spreadsheet
continue
valid_file?
continue
File.extname(file.path)
file.path
file.extname
file.content_type
file
continue
file
csv.sheet(0)
csv
quit
qut
agreement_benefits.find_by(insured_type: :principal).max_age
agreement_benefits.find_by(insured_type: :principal).min_age
@gyrt_plan.include?(@agreement.plan.acronym)
@gyrt.include?(@agreement.plan.acronym)
quit
age_min_max
continue
age_min_max
next
min_age
{min_age}
continue
import_result.is_a?(Hash)
import_result.is_a?(String)
import_result
continue
gyrt_ranking_plan.include?(@agreement.plan.acronym)
gyrt_plan.include?(@agreement.plan.acronym)
continue
ontinue
@denied_members_counter
@denied_members
quit
batch_hash[:rank]
age_min_max
continue
contine
continue
batch_hash[:rank]
age_min_max
continue
age_min_max
agreement_benefits
continue
cntinue
age_min_maxcontinue
age_min_max
continue
batch_hash[:rank]
batch_hash
member
age_min_max
continue
new_batch.save
new_batch.batch_beneficiaries
new_batch.batch_dependents
new_batch
continue
new_batch.save!
new_batch.save
new_batch.member_details.age
new_batch
continue
new_group_remit[:removed_batches]
new_group_remit
continue
@batch.agreement_benefit.max_age
@batch.agreement_benefit.min_age
@batch
continue
@batch
member.age
continue
member.age
@member.age
continue
member.age
continue
@batch
continue
member.member_details.age
member.member_details
member.member_details.age
member = reoved_members[0]
member = removed_members[0]
member = members[0]
reoved_members = new_group_remit[:removed_batches]
reoved_members = new_group_remmit[:removed_batches]
new_group_remit
@group_remit
continue
batch_params[:transferred].to_icontineu
batch_params[:transferred] == 1
batch_params[:transferred] == true
batch_params
continue
AgreementBenefit.find_by(insured_type: :ranking_bod)
AgreementBenefit.find_by(insured_type: :principal)
AgreementBenefit.find_by(insured_type: 2)
AgreementBenefit.find_by(insured_type: 1)
AgreementBenefit.find_by(insured_type)
@batch.status
@batch.agreement_benefit.insured_type(:ranking_senior_officer)
@batch.agreement_benefit.insured_type[:ranking_senior_officer]
@batch.agreement_benefit.insured_type
@batch.agreement_benefits.insured_type
agreement_benefits.insured_type
:ranking_bod
        @batch.set_premium_and_service_fees(:ranking_senior_officer)
batch_params[:rank]
batch_params
continue
@agreement.plan
@agreeman.plan
@agreement
continue
params[:anniversary_id].to_i
params[:anniversary_id]
@group_remit.anniversary
@group_remit
today
@agreement
continue
@anniversaries
continue
expiry_dates
continue
expiry_dates
@anniversaries
<<<<<<< HEAD
continue
@anniversaries
<<<<<<< HEAD
continue
agreement
continue
@member
<<<<<<< HEAD
continue
next
continue
group_remit(batch.group_remit.id)
group_remit(batch.group_remit)
batch.group_remit
batch
next
batch
continue
params[:batch_id]
params
continue
batch_health_dec_params
params
@batch_health_dec
continue
@gross_premium.typeof
@gross_premium
@batch_dependent_premiums
continue
@batches_container[0].premium.type_of
@batches_container[0].premium
@batches_dependents[0].premium.type_of
@batches_dependents[0]
@batch_dependents[0]
@gross_premium.to_d
@gross_premium.type_of
@gross_premium
continue
@batches_container.count * 581
@batches_container.pluck(:premium).reduce(0){|sum, price| sum+price}
batches = @batches_container.where(:coop_sf_amount)
batches = @batches_container.where(:coop_sf_amount = 58.3)
batches = @batches_container.where(:coop_sf_amount)
batches = @batches_container.where(coop_sf_amount: true)
batches = @batches_container.where(coop_sf_amount: '58.3')
batches
batches = @batches_container.where(coop_sf_amount: 58.3)
batches = @batches_container.where(coop_sf_amount: not  0)
batches = @batches_container.where(:coop_sf_amount not 0)
batches = @batches_container.where(:coop_sf_amount != 0)
@batches_container.sum(:premium)
@batches_container.count * 583
continue
@batches_container.sum(:coop_sf_amount)continue
@batches_container.sum(:coop_sf_amount)
batch_dependent_coop_commissions
@total_coop_commission
@batches_container.count * 583
@batches_container.count
@batches_container.sum(:premium)
@batches_container.sum(:premium.to_D)
@batches_container.sum(:premium)
@batches_container.sum
@batches_container.sum('batches_container.premium')
@batches_container.sum('batch.premium')
@batches_container.sum(:premium)
@batches_container[0].premium * 1021
@batches_container[0].premium x 1021
@batches_container[0].premium
@batches_container[0]
@batches_container[0].premium
@batches_container.premium
@batches_container.count
@batches.count
@batches
@batches_premium
continue
@batches_container.sum(:coop_sf_amount)
@total_coop_commission
@gross_premium
continue
@batches_dependents
@batch_dependents
batch_dependents
batch_dependent_coop_commissions
@batch_dependent_premiums
continue
cntinue
batch_dependent_coop_commissions
batch_dependent_coop_comissions
@batches_dependents.sum(:premium)
@batches_dependents
@batches_dependent_premiums
quit
=======
>>>>>>> 5d3ce79 (merge from underwriting module to main)
=======
>>>>>>> main
=======
>>>>>>> main
